<div class="d-flex justify-content-between align-items-center mb-4">
  <h1>Taking: <%= examination.name %></h1>
  <div class="exam-timer card bg-danger text-white p-2">
    <h5 class="mb-0" id="exam-timer">Loading...</h5>
  </div>
</div>

<div class="card mb-4">
  <div class="card-header bg-primary text-white">
    <h5 class="mb-0">Examination Information</h5>
  </div>
  <div class="card-body">
    <div class="row">
      <div class="col-md-4">
        <p><strong>Course:</strong> <%= examination.course.name %></p>
      </div>
      <div class="col-md-4">
        <p><strong>Total Marks:</strong> <%= examination.totalMarks %></p>
      </div>
      <div class="col-md-4">
        <p><strong>Pass Marks:</strong> <%= examination.passMarks %></p>
      </div>
    </div>
  </div>
</div>

<form action="/examinations/<%= examination._id %>/submit" method="POST" id="exam-form">
  <input type="hidden" name="examResultId" value="<%= examResult._id %>">
  
  <% examination.questions.forEach((question, qIndex) => { %>
    <div class="card mb-4 question-card" data-question-id="<%= question._id %>">
      <div class="card-header bg-light">
        <h5 class="mb-0">Question <%= qIndex + 1 %> (Marks: <%= question.marks %>)</h5>
      </div>
      <div class="card-body">
        <p class="mb-3"><%= question.text %></p>
        <div class="ms-3">
          <% question.options.forEach((option, oIndex) => { %>
            <div class="form-check mb-2">
              <input 
                class="form-check-input option-input" 
                type="radio" 
                name="answers[<%= question._id %>]" 
                id="q<%= qIndex %>-o<%= oIndex %>" 
                value="<%= option._id %>"
              >
              <label class="form-check-label option-label" for="q<%= qIndex %>-o<%= oIndex %>">
                <%= option.text %>
              </label>
            </div>
          <% }); %>
        </div>
        <div class="text-danger question-error" id="error-<%= question._id %>" style="display: none;">
          Please select an answer for this question
        </div>
      </div>
    </div>
  <% }); %>
  
  <div class="d-grid gap-2 col-md-6 mx-auto mb-5">
    <button type="submit" class="btn btn-primary btn-lg">
      <i class="fas fa-paper-plane"></i> Submit Examination
    </button>
  </div>
</form>

<script>
  document.getElementById('exam-form').addEventListener('submit', function(e) {
    console.log('Form submission triggered');
    
    // Get all questions and their answers
    const questions = <%= JSON.stringify(examination.questions.map(q => q._id)) %>;
    const answers = {};
    
    // Check each question
    let unansweredQuestions = [];
    
    questions.forEach(questionId => {
      const radioButtons = document.querySelectorAll(`input[name="answers[${questionId}]"]`);
      const errorElement = document.getElementById(`error-${questionId}`);
      
      // Check if any option is selected for this question
      let isAnswered = false;
      radioButtons.forEach(radio => {
        if (radio.checked) {
          isAnswered = true;
          answers[questionId] = radio.value;
        }
      });
      
      if (!isAnswered) {
        unansweredQuestions.push(questionId);
        if (errorElement) {
          errorElement.style.display = 'block';
        }
      } else if (errorElement) {
        errorElement.style.display = 'none';
      }
    });
    
    // If any questions are unanswered, prevent form submission
    if (unansweredQuestions.length > 0) {
      e.preventDefault();
      console.log('Unanswered questions:', unansweredQuestions);
      alert(`Please answer all questions before submitting the examination. (${unansweredQuestions.length} questions unanswered)`);
    } else {
      console.log('All questions answered, submitting form');
      // Form will submit normally
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Start the timer
    if (typeof startExamTimer === 'function') {
      startExamTimer(<%= examination.durationMinutes %>);
    } else {
      console.error('startExamTimer function is not defined');
      
      // Define the function locally if it's not available
      function startExamTimer(durationMinutes) {
        if (!durationMinutes) return;
        
        const timerElement = document.getElementById('exam-timer');
        if (!timerElement) return;
        
        const endTime = new Date().getTime() + (durationMinutes * 60 * 1000);
        
        const timerInterval = setInterval(function() {
          const now = new Date().getTime();
          const distance = endTime - now;
          
          const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
          const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
          const seconds = Math.floor((distance % (1000 * 60)) / 1000);
          
          timerElement.innerHTML = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
          
          if (distance < 0) {
            clearInterval(timerInterval);
            timerElement.innerHTML = "TIME'S UP!";
            document.getElementById('exam-form').submit();
          }
        }, 1000);
      }
      
      // Call the locally defined function
      startExamTimer(<%= examination.durationMinutes %>);
    }
  });
</script>